import os
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, Dataset
from torchvision import transforms
from PIL import Image
import matplotlib.pyplot as plt
from tqdm import tqdm
import segmentation_models_pytorch as smp
import streamlit as st
import urllib.request

DEVICE = 'cuda' if torch.cuda.is_available() else 'cpu'
model_unet = smp.Unet(
    encoder_name="resnet101",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–π —ç–Ω–∫–æ–¥–µ—Ä
    encoder_weights="imagenet",  # –í–µ—Å–∞, –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ
    in_channels=3,  # 3 –∫–∞–Ω–∞–ª–∞ –¥–ª—è RGB
    classes=1,  # 1 –∫–ª–∞—Å—Å (–±–∏–Ω–∞—Ä–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è)
    activation="sigmoid",  # Sigmoid –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
)
weights_path = "models/model_weights_Unet_resnet101_1.pt"
model_unet.load_state_dict(torch.load(weights_path, map_location=torch.device("cpu")))
model_unet.to(DEVICE)

model_segformer = smp.Segformer(
    encoder_name="resnet34",  
    encoder_weights="imagenet",  # –í–µ—Å–∞, –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –Ω–∞ ImageNet
    in_channels=3,  # 3 –∫–∞–Ω–∞–ª–∞ –¥–ª—è RGB
    classes=1,  # 1 –∫–ª–∞—Å—Å (–±–∏–Ω–∞—Ä–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è)
    activation="sigmoid",  # Sigmoid –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
)
weights_path_seg = "models/model_weights_segform.pt"
model_segformer.load_state_dict(torch.load(weights_path_seg, map_location=torch.device("cpu")))
model_segformer.to(DEVICE)

IMAGE_SIZE = (256, 256)
transform = transforms.Compose([
    transforms.Resize(IMAGE_SIZE),
    transforms.ToTensor(),
])

st.page_link('pages/–ö–æ—Å–º–æ—Å_–º–µ—Ç—Ä–∏–∫–∏.py', label='–£–∑–Ω–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏')
st.title('__–°–µ–≥–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∞—ç—Ä–æ–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Å–Ω–∏–º–æ–∫! üóæ__')
st.write('##### <- –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–Ω–∏–º–æ–∫ —Å—é–¥–∞')

uploaded_file = st.sidebar.file_uploader(label='–ó–∞–≥—Ä—É–∂–∞—Ç—å —Å–Ω–∏–º–æ–∫ —Å—é–¥–∞:', type=['jpeg', 'png'], accept_multiple_files=True)
model_unet.eval()

model=None

st.write('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:')
if st.button('Unet'):
    model = model_unet
if st.button('Segform'):
    model = model_segformer

if uploaded_file is not None:
    for file in uploaded_file:
        image = Image.open(file)
        st.write('–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:')
        st.image(image)
        if model is not None:
            if image.mode == "RGBA":
                image = image.convert("RGB")
            image_tensor = transform(image)
            image_tensor = image_tensor.unsqueeze(0)
            if model is not None:
                with torch.no_grad():
                    outputs = model(image_tensor)
                    pred_masks = (outputs > 0.5).float()  # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è –º–∞—Å–æ–∫
                    im = pred_masks.squeeze().cpu().numpy()
                    st.write('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –º–∞—Å–∫–∞:')
                    st.image(im)

link = st.sidebar.text_input(label='–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–Ω–∏–º–æ–∫')
if link is not '':
    image = Image.open(urllib.request.urlopen(link)).convert("RGB")
    st.write('–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:')
    st.image(image)
    if model is not None:
        if image.mode == "RGBA":
            image = image.convert("RGB")
        image_tensor = transform(image)
        image_tensor = image_tensor.unsqueeze(0)
        if model is not None:
            with torch.no_grad():
                outputs = model(image_tensor)
                pred_masks = (outputs > 0.5).float()  # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è –º–∞—Å–æ–∫
                im = pred_masks.squeeze().cpu().numpy()
                st.write('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –º–∞—Å–∫–∞:')
                st.image(im)

